#!/usr/bin/perl
# This file is part of the perltwit command line application.
# 
# Copyright Trenton D. Adams <perltwit at trentonadams daught ca>
# 
# perltwit is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# perltwit is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
# 
# You should have received a copy of the GNU Lesser General Public 
# License along with perltwit.  If not, see <http://www.gnu.org/licenses/>.
# 
# See the COPYING file for more information.

use Net::Twitter;
use Scalar::Util 'blessed';
use Getopt::Std;

%options=();
getopts("m:t:f:",\%options);

if (!(defined $options{m}))
{
  print "You must specify the following options\n";
  print " twitter -m message -f TwitterID-source [ -t TwitterID-destination ]  ]\n";
  exit 1;
}

my $message = $options{m};
my $to = $options{t};
my $from = $options{f};


sub save_consumer_key
{
  $consumer_key = $_[0];
  $consumer_key_secret = $_[1];
  print "saving $consumer_key and $consumer_key_secret \n";
  open(MYOUTPUTFILE, ">" . $ENV{'HOME'} . "/.twitter/twitter.conf");
  print MYOUTPUTFILE $consumer_key . "\n";
  print MYOUTPUTFILE $consumer_key_secret . "\n";
}

sub restore_consumer_key
{
  open(MYINPUTFILE, "<". $ENV{'HOME'} . "/.twitter/twitter.conf");
  $consumer_key = <MYINPUTFILE>;
  $consumer_key_secret = <MYINPUTFILE>;
  chomp $consumer_key;
  chomp $consumer_key_secret;
  print "key: $consumer_key, secret: $consumer_key_secret\n" ; 
  return ($consumer_key, $consumer_key_secret);
}

sub restore_tokens
{
  open(MYINPUTFILE, "<". $ENV{'HOME'} . "/.twitter/twitter-" . $from .  ".conf");
  $access_token = <MYINPUTFILE>;
  $access_token_secret = <MYINPUTFILE>;
  chomp $access_token;
  chomp $access_token_secret;
  print "token: $access_token, secret: $access_token_secret\n" ; 
  return ($access_token, $access_token_secret);
}

sub save_tokens
{
  $access_token = $_[0];
  $access_token_secret = $_[1];
  print "saving $access_token and $access_token_secret \n";
  open(MYOUTPUTFILE, ">" . $ENV{'HOME'} . "/.twitter/twitter-" . $from . ".conf");
  print MYOUTPUTFILE $access_token . "\n";
  print MYOUTPUTFILE $access_token_secret . "\n";
}

sub restore_tokens
{
  open(MYINPUTFILE, "<". $ENV{'HOME'} . "/.twitter/twitter-" . $from .  ".conf");
  $access_token = <MYINPUTFILE>;
  $access_token_secret = <MYINPUTFILE>;
  chomp $access_token;
  chomp $access_token_secret;
  print "token: $access_token, secret: $access_token_secret" ; 
  return ($access_token, $access_token_secret);
}

my($consumer_key, $consumer_key_secret) = restore_consumer_key();
if (!$consumer_key || !$consumer_key_secret) {
  print "Consumer key and/or secret not setup, please register an application with twitter\n";
  print "Enter your key: ";
  $consumer_key = <STDIN>; # wait for input
  chomp $consumer_key;
  print "Enter your secret: ";
  $consumer_key_secret = <STDIN>; # wait for input
  chomp $consumer_key_secret;
  save_consumer_key($consumer_key, $consumer_key_secret);
}

my $nt = Net::Twitter->new(
                traits   => [qw/API::RESTv1_1/, 'OAuth'],
                consumer_key => $consumer_key,
                consumer_secret => $consumer_key_secret,
                ssl => 1
                );

# You'll save the token and secret in cookie, config file or session database
my($access_token, $access_token_secret) = restore_tokens();
if ($access_token && $access_token_secret) {
  $nt->access_token($access_token);
  $nt->access_token_secret($access_token_secret);
}

unless ( $nt->authorized ) {
# The client is not yet authorized: Do it now
  print "Authorize this app at ", $nt->get_authorization_url, " and enter the PIN#\n";

  my $pin = <STDIN>; # wait for input
  chomp $pin;

  my($access_token, $access_token_secret, $user_id, $screen_name) = $nt->request_access_token(verifier => $pin);
  save_tokens($access_token, $access_token_secret); # if necessary

  print $user_id . "\n" . $screen_name;
}

my $result;
if (defined $to)
{
  print "Direct to $to: $message\n";
  $result = $nt->new_direct_message($message, {screen_name => $to});
}
else
{ 
  print "General twitter update: $message\n";
  $result = $nt->update($message);
}

print "Message sent: $result\n";
